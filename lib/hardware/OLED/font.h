#ifndef _inc_font
#define _inc_font

/*
 * Format
 * <height>, <width>, <additional spacing per char>, 
 * <first ascii char>, <last ascii char>,
 * <data>
 */


/*
 * You can add more symbols by extending the data array, but you must also:
 * 1. Increase the <last ascii char> value (currently 126) to match your new highest symbol.
 * 2. Add 5 bytes for each new symbol, in order, for each ASCII code between <first ascii char> and <last ascii char>.
 * 3. Ensure your OLED driver and display buffer can handle the new symbols.
 *
 * Most OLEDs (e.g., SSD1306 128x64) can display any glyphs you define, as long as you have enough flash/RAM for the font data.
 * If you add non-ASCII symbols, you may need to handle their encoding in your code.
 */

 const uint8_t font_8x5[] =
{
			8, 5, 1, 32, 178,				   // 8x5 font, ASCII 32-126
			0x00, 0x00, 0x00, 0x00, 0x00,      // (space)
			0x00, 0x00, 0x5F, 0x00, 0x00,      // !
			0x00, 0x07, 0x00, 0x07, 0x00,      // "
			0x14, 0x7F, 0x14, 0x7F, 0x14,      // #
			0x24, 0x2A, 0x7F, 0x2A, 0x12,      // $
			0x23, 0x13, 0x08, 0x64, 0x62,      // %
			0x36, 0x49, 0x56, 0x20, 0x50,      // &
			0x00, 0x08, 0x07, 0x03, 0x00,      // '
			0x00, 0x1C, 0x22, 0x41, 0x00,      // (
			0x00, 0x41, 0x22, 0x1C, 0x00,      // )
			0x2A, 0x1C, 0x7F, 0x1C, 0x2A,      // *
			0x08, 0x08, 0x3E, 0x08, 0x08,      // +
			0x00, 0x80, 0x70, 0x30, 0x00,      // ,
			0x08, 0x08, 0x08, 0x08, 0x08,      // -
			0x00, 0x00, 0x60, 0x60, 0x00,      // .
			0x20, 0x10, 0x08, 0x04, 0x02,      // /
			0x3E, 0x51, 0x49, 0x45, 0x3E,      // 0
			0x00, 0x42, 0x7F, 0x40, 0x00,      // 1
			0x72, 0x49, 0x49, 0x49, 0x46,      // 2
			0x21, 0x41, 0x49, 0x4D, 0x33,      // 3
			0x18, 0x14, 0x12, 0x7F, 0x10,      // 4
			0x27, 0x45, 0x45, 0x45, 0x39,      // 5
			0x3C, 0x4A, 0x49, 0x49, 0x31,      // 6
			0x41, 0x21, 0x11, 0x09, 0x07,      // 7
			0x36, 0x49, 0x49, 0x49, 0x36,      // 8
			0x46, 0x49, 0x49, 0x29, 0x1E,      // 9
			0x00, 0x00, 0x14, 0x00, 0x00,      // :
			0x00, 0x40, 0x34, 0x00, 0x00,      // ;
			0x00, 0x08, 0x14, 0x22, 0x41,      // <
			0x14, 0x14, 0x14, 0x14, 0x14,      // =
			0x00, 0x41, 0x22, 0x14, 0x08,      // >
			0x02, 0x01, 0x59, 0x09, 0x06,      // ?
			0x3E, 0x41, 0x5D, 0x59, 0x4E,      // @
			0x7C, 0x12, 0x11, 0x12, 0x7C,      // A
			0x7F, 0x49, 0x49, 0x49, 0x36,      // B
			0x3E, 0x41, 0x41, 0x41, 0x22,      // C
			0x7F, 0x41, 0x41, 0x41, 0x3E,      // D
			0x7F, 0x49, 0x49, 0x49, 0x41,      // E
			0x7F, 0x09, 0x09, 0x09, 0x01,      // F
			0x3E, 0x41, 0x41, 0x51, 0x73,      // G
			0x7F, 0x08, 0x08, 0x08, 0x7F,      // H
			0x00, 0x41, 0x7F, 0x41, 0x00,      // I
			0x20, 0x40, 0x41, 0x3F, 0x01,      // J
			0x7F, 0x08, 0x14, 0x22, 0x41,      // K
			0x7F, 0x40, 0x40, 0x40, 0x40,      // L
			0x7F, 0x02, 0x1C, 0x02, 0x7F,      // M
			0x7F, 0x04, 0x08, 0x10, 0x7F,      // N
			0x3E, 0x41, 0x41, 0x41, 0x3E,      // O
			0x7F, 0x09, 0x09, 0x09, 0x06,      // P
			0x3E, 0x41, 0x51, 0x21, 0x5E,      // Q
			0x7F, 0x09, 0x19, 0x29, 0x46,      // R
			0x26, 0x49, 0x49, 0x49, 0x32,      // S
			0x03, 0x01, 0x7F, 0x01, 0x03,      // T
			0x3F, 0x40, 0x40, 0x40, 0x3F,      // U
			0x1F, 0x20, 0x40, 0x20, 0x1F,      // V
			0x3F, 0x40, 0x38, 0x40, 0x3F,      // W
			0x63, 0x14, 0x08, 0x14, 0x63,      // X
			0x03, 0x04, 0x78, 0x04, 0x03,      // Y
			0x61, 0x59, 0x49, 0x4D, 0x43,      // Z
			0x00, 0x7F, 0x41, 0x41, 0x41,      // [
			0x02, 0x04, 0x08, 0x10, 0x20,      // backslash (\)
			0x00, 0x41, 0x41, 0x41, 0x7F,      // ]
			0x04, 0x02, 0x01, 0x02, 0x04,      // ^
			0x40, 0x40, 0x40, 0x40, 0x40,      // _
			0x00, 0x03, 0x07, 0x08, 0x00,      // `
			0x20, 0x54, 0x54, 0x78, 0x40,      // a
			0x7F, 0x28, 0x44, 0x44, 0x38,      // b
			0x38, 0x44, 0x44, 0x44, 0x28,      // c
			0x38, 0x44, 0x44, 0x28, 0x7F,      // d
			0x38, 0x54, 0x54, 0x54, 0x18,      // e
			0x00, 0x08, 0x7E, 0x09, 0x02,      // f
			0x18, 0xA4, 0xA4, 0x9C, 0x78,      // g
			0x7F, 0x08, 0x04, 0x04, 0x78,      // h
			0x00, 0x44, 0x7D, 0x40, 0x00,      // i
			0x20, 0x40, 0x40, 0x3D, 0x00,      // j
			0x7F, 0x10, 0x28, 0x44, 0x00,      // k
			0x00, 0x41, 0x7F, 0x40, 0x00,      // l
			0x7C, 0x04, 0x78, 0x04, 0x78,      // m
			0x7C, 0x08, 0x04, 0x04, 0x78,      // n
			0x38, 0x44, 0x44, 0x44, 0x38,      // o
			0xFC, 0x18, 0x24, 0x24, 0x18,      // p
			0x18, 0x24, 0x24, 0x18, 0xFC,      // q
			0x7C, 0x08, 0x04, 0x04, 0x08,      // r
			0x48, 0x54, 0x54, 0x54, 0x24,      // s
			0x04, 0x04, 0x3F, 0x44, 0x24,      // t
			0x3C, 0x40, 0x40, 0x20, 0x7C,      // u
			0x1C, 0x20, 0x40, 0x20, 0x1C,      // v
			0x3C, 0x40, 0x30, 0x40, 0x3C,      // w
			0x44, 0x28, 0x10, 0x28, 0x44,      // x
			0x4C, 0x90, 0x90, 0x90, 0x7C,      // y
			0x44, 0x64, 0x54, 0x4C, 0x44,      // z
			0x00, 0x08, 0x36, 0x41, 0x00,      // {
			0x00, 0x00, 0x77, 0x00, 0x00,      // |
			0x00, 0x41, 0x36, 0x08, 0x00,      // }
			0x02, 0x01, 0x02, 0x04, 0x02,      // ~
			/*
			 * Inverted uppercase (A-Z) and lowercase (a-z) letters.
			 * Each glyph is bitwise inverted from the original.
			 */

			// Inverted A-Z (ASCII 65-90)
			0x83, 0xED, 0xEE, 0xED, 0x83,      // A \u127
			0x80, 0xB6, 0xB6, 0xB6, 0xC9,      // B \u128
			0xC1, 0xBE, 0xBE, 0xBE, 0xDD,      // C \u129
			0x80, 0xBE, 0xBE, 0xBE, 0xC1,      // D \u130
			0x80, 0xB6, 0xB6, 0xB6, 0xBE,      // E \u131
			0x80, 0xF6, 0xF6, 0xF6, 0xFE,      // F \u132
			0xC1, 0xBE, 0xBE, 0xAE, 0x8C,      // G \u133
			0x80, 0xF7, 0xF7, 0xF7, 0x80,      // H \u134
			0xBE, 0xBE, 0x80, 0xBE, 0xBE,      // I \u135
			0xDF, 0xBF, 0xBE, 0xC0, 0xFE,      // J \u136
			0x80, 0xF7, 0xEB, 0xDD, 0xBE,      // K \u137
			0x80, 0xBF, 0xBF, 0xBF, 0xBF,      // L \u138
			0x80, 0xFD, 0xE3, 0xFD, 0x80,      // M \u139
			0x80, 0xFB, 0xF7, 0xEF, 0x80,      // N \u140
			0xC1, 0xBE, 0xBE, 0xBE, 0xC1,      // O \u141
			0x80, 0xF6, 0xF6, 0xF6, 0xF9,      // P \u142
			0xC1, 0xBE, 0xAE, 0xDE, 0xA1,      // Q \u143
			0x80, 0xF6, 0xE6, 0xD6, 0xB9,      // R \u144
			0xD9, 0xB6, 0xB6, 0xB6, 0xCD,      // S \u145
			0xFC, 0xFE, 0x80, 0xFE, 0xFC,      // T \u146
			0xC0, 0xBF, 0xBF, 0xBF, 0xC0,      // U \u147
			0xE0, 0xDF, 0xBF, 0xDF, 0xE0,      // V \u148
			0xC0, 0xBF, 0xC7, 0xBF, 0xC0,      // W \u149
			0x9C, 0xEB, 0xF7, 0xEB, 0x9C,      // X \u150
			0xFC, 0xFB, 0x87, 0xFB, 0xFC,      // Y \u151
			0x9E, 0xA6, 0xB6, 0xB2, 0xBC,      // Z \u152

			// Inverted a-z (ASCII 97-122)
			0xDF, 0xAB, 0xAB, 0x87, 0xBF,      // a
			0x80, 0xD7, 0xBB, 0xBB, 0xC7,      // b
			0xC7, 0xBB, 0xBB, 0xBB, 0xD7,      // c
			0xC7, 0xBB, 0xBB, 0xD7, 0x80,      // d
			0xC7, 0xAB, 0xAB, 0xAB, 0xE7,      // e
			0xFF, 0xF7, 0x81, 0xF6, 0xFD,      // f
			0xE7, 0x5B, 0x5B, 0x63, 0x87,      // g
			0x80, 0xF7, 0xFB, 0xFB, 0x87,      // h
			0xBB, 0x82, 0x80, 0xBF, 0xBB,      // i
			0xDF, 0xBF, 0xBF, 0xC2, 0xFF,      // j
			0x80, 0xEF, 0xD7, 0xBB, 0xFF,      // k
			0xBF, 0xBE, 0x80, 0xBF, 0xBF,      // l
			0x83, 0xFB, 0x87, 0xFB, 0x87,      // m
			0x83, 0xF7, 0xFB, 0xFB, 0x87,      // n
			0xC7, 0xBB, 0xBB, 0xBB, 0xC7,      // o
			0x03, 0xE7, 0xDB, 0xDB, 0xE7,      // p
			0xE7, 0xDB, 0xDB, 0xE7, 0x03,      // q
			0x83, 0xF7, 0xFB, 0xFB, 0xF7,      // r
			0xB7, 0xAB, 0xAB, 0xAB, 0xDB,      // s
			0xFB, 0xFB, 0xC0, 0xBB, 0xDB,      // t
			0xC3, 0xBF, 0xBF, 0xDF, 0x83,      // u
			0xE3, 0xDF, 0xBF, 0xDF, 0xE3,      // v
			0xC3, 0xBF, 0xCF, 0xBF, 0xC3,      // w
			0xBB, 0xD7, 0xEF, 0xD7, 0xBB,      // x
			0xB3, 0x6F, 0x6F, 0x6F, 0x83,      // y
			0xBB, 0x9B, 0xAB, 0xB3, 0xBB,      // z
};

#endif
